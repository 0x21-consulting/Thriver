import SimpleSchema from 'simpl-schema';
import { Mongo } from 'meteor/mongo';

/**
 * @summary Site sections namespace
 */
const Sections = {};

/**
 * @summary Sections collection
 * @type {Mongo.Collection}
 */
Sections.collection = new Mongo.Collection('sections');

/**
 * @summary Sections collection schema
 * @type {SimpleSchema}
 */
Sections.schema = new SimpleSchema({
  /** ID */
  _id: {
    type: String,
    optional: true, // ID is autogenerated
  },
  /** Section name */
  name: {
    type: String,
    optional: true,
    label: 'Section name',
  },
  /** Section icon */
  icon: {
    type: String,
    optional: true,
    defaultValue: 'ïƒ©',
    min: 1,
    max: 1,
    label: 'Section icon',
  },
  /** Section data */
  data: {
    type: Object,
    optional: false,
    defaultValue: {},
    blackbox: true,
  },
  /** Section template, which is required */
  template: {
    type: String,
    label: 'Section template',
  },
  /** Order of section on page or within a section */
  order: {
    type: Number,
    label: 'Section order',
  },
  /** Display this section on the page? */
  displayOnPage: {
    type: Boolean,
    defaultValue: false,
  },
  /** Section Tabs or subsections */
  children: {
    type: Array,
    defaultValue: [],
  },
  'children.$': {
    type: String,
  },
});

// Apply schema to collection
Sections.collection.attachSchema(Sections.schema);

/**
 * @summary Get section details
 * @function
 *   @param {String}   id - The ID of a section whose details to get;
 *       returns all page sections by default
 *   @param {String[]} fields - Fields to include
 * @returns {LocalCollection.Cursor | Object | undefined}
 */
Sections.get = (id, fields) => {
  // Meteor Collection.find options
  const fieldsObj = {
    fields: {},
    sort: { order: 1 },
  };

  // Prepare fields projection filter
  if (fields instanceof Array && fields.length > 0) {
    for (let i = 0; i < fields.length; i += 1) {
      fieldsObj.fields[fields[i]] = true;
    }
  }

  if (id) return Sections.collection.findOne({ _id: id }, fieldsObj);

  // Return all page sections
  return Sections.collection.find({ displayOnPage: true }, fieldsObj);
};

export default Sections;
