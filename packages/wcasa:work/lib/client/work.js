//Sticky Kit Must be moved
var sticky = function () {
    // Generated by CoffeeScript 1.9.2

    /**
    @license Sticky-kit v1.1.2 | WTFPL | Leaf Corcoran 2015 | http://leafo.net
    */

    (function() {
    var $, win;

    $ = this.jQuery || window.jQuery;

    win = $(window);

    $.fn.stick_in_parent = function(opts) {
        var doc, elm, enable_bottoming, fn, i, inner_scrolling, len, manual_spacer, offset_top, parent_selector, recalc_every, sticky_class;
        if (opts == null) {
        opts = {};
        }
        sticky_class = opts.sticky_class, inner_scrolling = opts.inner_scrolling, recalc_every = opts.recalc_every, parent_selector = opts.parent, offset_top = opts.offset_top, manual_spacer = opts.spacer, enable_bottoming = opts.bottoming;
        if (offset_top == null) {
        offset_top = 0;
        }
        if (parent_selector == null) {
        parent_selector = void 0;
        }
        if (inner_scrolling == null) {
        inner_scrolling = true;
        }
        if (sticky_class == null) {
        sticky_class = "is_stuck";
        }
        doc = $(document);
        if (enable_bottoming == null) {
        enable_bottoming = true;
        }
        fn = function(elm, padding_bottom, parent_top, parent_height, top, height, el_float, detached) {
        var bottomed, detach, fixed, last_pos, last_scroll_height, offset, parent, recalc, recalc_and_tick, recalc_counter, spacer, tick;
        if (elm.data("sticky_kit")) {
            return;
        }
        elm.data("sticky_kit", true);
        last_scroll_height = doc.height();
        parent = elm.parent();
        if (parent_selector != null) {
            parent = parent.closest(parent_selector);
        }
        if (!parent.length) {
            throw "failed to find stick parent";
        }
        fixed = false;
        bottomed = false;
        spacer = manual_spacer != null ? manual_spacer && elm.closest(manual_spacer) : $("<div />");
        if (spacer) {
            spacer.css('position', elm.css('position'));
        }
        recalc = function() {
            var border_top, padding_top, restore;
            if (detached) {
            return;
            }
            last_scroll_height = doc.height();
            border_top = parseInt(parent.css("border-top-width"), 10);
            padding_top = parseInt(parent.css("padding-top"), 10);
            padding_bottom = parseInt(parent.css("padding-bottom"), 10);
            parent_top = parent.offset().top + border_top + padding_top;
            parent_height = parent.height();
            if (fixed) {
            fixed = false;
            bottomed = false;
            if (manual_spacer == null) {
                elm.insertAfter(spacer);
                spacer.detach();
            }
            elm.css({
                position: "",
                top: "",
                width: "",
                bottom: ""
            }).removeClass(sticky_class);
            restore = true;
            }
            top = elm.offset().top - (parseInt(elm.css("margin-top"), 10) || 0) - offset_top;
            height = elm.outerHeight(true);
            el_float = elm.css("float");
            if (spacer) {
            spacer.css({
                width: elm.outerWidth(true),
                height: height,
                display: elm.css("display"),
                "vertical-align": elm.css("vertical-align"),
                "float": el_float
            });
            }
            if (restore) {
            return tick();
            }
        };
        recalc();
        if (height === parent_height) {
            return;
        }
        last_pos = void 0;
        offset = offset_top;
        recalc_counter = recalc_every;
        tick = function() {
            var css, delta, recalced, scroll, will_bottom, win_height;
            if (detached) {
            return;
            }
            recalced = false;
            if (recalc_counter != null) {
            recalc_counter -= 1;
            if (recalc_counter <= 0) {
                recalc_counter = recalc_every;
                recalc();
                recalced = true;
            }
            }
            if (!recalced && doc.height() !== last_scroll_height) {
            recalc();
            recalced = true;
            }
            scroll = win.scrollTop();
            if (last_pos != null) {
            delta = scroll - last_pos;
            }
            last_pos = scroll;
            if (fixed) {
            if (enable_bottoming) {
                will_bottom = scroll + height + offset > parent_height + parent_top;
                if (bottomed && !will_bottom) {
                bottomed = false;
                elm.css({
                    position: "fixed",
                    bottom: "",
                    top: offset
                }).trigger("sticky_kit:unbottom");
                }
            }
            if (scroll < top) {
                fixed = false;
                offset = offset_top;
                if (manual_spacer == null) {
                if (el_float === "left" || el_float === "right") {
                    elm.insertAfter(spacer);
                }
                spacer.detach();
                }
                css = {
                position: "",
                width: "",
                top: ""
                };
                elm.css(css).removeClass(sticky_class).trigger("sticky_kit:unstick");
            }
            if (inner_scrolling) {
                win_height = win.height();
                if (height + offset_top > win_height) {
                if (!bottomed) {
                    offset -= delta;
                    offset = Math.max(win_height - height, offset);
                    offset = Math.min(offset_top, offset);
                    if (fixed) {
                    elm.css({
                        top: offset + "px"
                    });
                    }
                }
                }
            }
            } else {
            if (scroll > top) {
                fixed = true;
                css = {
                position: "fixed",
                top: offset
                };
                css.width = elm.css("box-sizing") === "border-box" ? elm.outerWidth() + "px" : elm.width() + "px";
                elm.css(css).addClass(sticky_class);
                if (manual_spacer == null) {
                elm.after(spacer);
                if (el_float === "left" || el_float === "right") {
                    spacer.append(elm);
                }
                }
                elm.trigger("sticky_kit:stick");
            }
            }
            if (fixed && enable_bottoming) {
            if (will_bottom == null) {
                will_bottom = scroll + height + offset > parent_height + parent_top;
            }
            if (!bottomed && will_bottom) {
                bottomed = true;
                if (parent.css("position") === "static") {
                parent.css({
                    position: "relative"
                });
                }
                return elm.css({
                position: "absolute",
                bottom: padding_bottom,
                top: "auto"
                }).trigger("sticky_kit:bottom");
            }
            }
        };
        recalc_and_tick = function() {
            recalc();
            return tick();
        };
        detach = function() {
            detached = true;
            win.off("touchmove", tick);
            win.off("scroll", tick);
            win.off("resize", recalc_and_tick);
            $(document.body).off("sticky_kit:recalc", recalc_and_tick);
            elm.off("sticky_kit:detach", detach);
            elm.removeData("sticky_kit");
            elm.css({
            position: "",
            bottom: "",
            top: "",
            width: ""
            });
            parent.position("position", "");
            if (fixed) {
            if (manual_spacer == null) {
                if (el_float === "left" || el_float === "right") {
                elm.insertAfter(spacer);
                }
                spacer.remove();
            }
            return elm.removeClass(sticky_class);
            }
        };
        win.on("touchmove", tick);
        win.on("scroll", tick);
        win.on("resize", recalc_and_tick);
        $(document.body).on("sticky_kit:recalc", recalc_and_tick);
        elm.on("sticky_kit:detach", detach);
        return setTimeout(tick, 0);
        };
        for (i = 0, len = this.length; i < len; i++) {
        elm = this[i];
        fn($(elm));
        }
        return this;
    };

    }).call(this);
};
/**
 * Helper for changing tabs when a user clicks a link
 * @method
 *   @param {$.Event} event - jQuery Event instance
 */
var changeTabs = function (event) {
    check(event, $.Event);

    event.stopPropagation(); event.preventDefault();

    var parent  = document.querySelector('section.mainSection.work'),
        active  = parent.querySelectorAll('.active'),
        target  = event.currentTarget.parentElement,
        article = parent.querySelector('article[data-id="' +
            target.dataset.id + '"]'),
        i = 0, j = active.length, path, parentName;

    // don't do anything if there's no article
    if (!article) return;

    // Remove active class from all elements under parent
    for (; i < j; ++i)
        active[i].classList.remove('active');

    // Make article with same ID as tab active
    article.classList.add('active');

    // Make tab active, too
    target.classList.add('active');

    // Establish current path
    parentName = parent.id;
    path = parentName + '/';

    // Is this is a submenu item?
    parent = target.parentElement.parentElement;
    if ( parent.nodeName.toLowerCase() === 'li' ) {
        // Make active
        parent.classList.add('active');

        // Add mobile article open
        document.body.classList.add('mobile-article-open');

        // Add to path
        path += Thriver.sections.generateId(
            getValue('name')(parent.dataset.id) ) + '/';
    }

    // Add current link to history as well
    path += Thriver.sections.generateId(
        getValue('name')(target.dataset.id) );

    // Update history registry
    Thriver.history.update(parentName, path);

    // Update URI
    //window.history.pushState({ path: path }, undefined, '/' + path);

    // If not already active, add fade class, then active class to body
    if (!document.body.classList.contains('workActive')) {
        // Start Fade effect
        document.body.classList.add('workFadeIn');
        // End Fade effect
        setTimeout(function () {
            document.body.classList.remove('workFadeIn');
            document.body.classList.add('workActive');
            // Sticky Initialization
            sticky();
            $(".sticky").stick_in_parent({
                parent: $(".work .main"),
                offset_top: 100
            });
        }, 250);
    }
},

/**
 * Sections collection getter
 * @function
 *   @param {string} field - The name of the field whose value to return
 *   @param {string} id    - The Mongo DB ID of the document to return.
 *      Optional.  Uses `this` otherwise.
 *   @returns {string}
 */
getValue = function (field) {
    check(field, String);                // Must be a String

    // Meteor template helpers expect a function with a single variable
    return function (id) {
        check(id, Match.Maybe(String));  // String or undefined

        var result;
        id = id || this.id || this._id;

        if (!id) return '';

        result = Thriver.sections.get( id, [field] );

        if (result)
            return result[field];
        else
            return '';
    };
};

// Tabs
Template.workNav.helpers({
    name: getValue('name'),
    icon: getValue('icon'),
    hasChildren: function (id) {
        var result;
        id = id || this.id;

        result = Thriver.sections.get(id, ['children']);

        if (result && result.children && result.children.length)
            return true;

        return false;
    },
    tabs: getValue('children')
});

// Navigation
Template.workListItem.helpers({
    icon:     getValue('icon'),
    name:     getValue('name'),
    tabs:     getValue('children'),
    tabName:  getValue('name'),
    anchor:   function () {
        //console.debug('parent data', Template.parentData());
        //debugger;
        //return Thriver.sections.generateId( getValue('name')(
        //    this instanceof String? this.toString() : this.id ) );

        // TODO: Create true anchor refs
        return '#';
    }
});

// Content Container
Template.workContentContainer.helpers({
    tabs:     getValue('children'),
    template: getValue('template'),
    subtabs:  getValue('children')
});

// Content
Template.workContent.helpers({
    data:     getValue('data'),
    icon:     getValue('icon'),
    name:     getValue('name'),
    hash:     function () {
        var content = getValue('data')(this.id).content;

        // Return a SHA256 hash of the content for use in editing
        if (content) return SHA256(content);
        else         return '';
    }
});

// About SA
Template.aboutSA.helpers({
    data:   getValue('data'),
    hash:   function () {
        var content = getValue('data')(this.id).aboutSA;

        // Return a SHA256 hash of the content for use in editing
        if (content) return SHA256(content);
        else         return '';
    }
});

// Helper for changing tabs
Template.workNav.events({
    'click h2': changeTabs,
    'click li > ul > li > a': changeTabs,
    'click button.backToTopWork': function (event) {
        offset = $('[id="what-we-do"]').offset().top + 228;
        $('body').animate({ scrollTop: offset }, 750);
    },
    /**
     * @summary Navigate back to Index
     * @method
     *   @param {$.Event} event
     */
    'click li.backToIndexWork': function (event) {
        check(event, $.Event);

        event.preventDefault(); event.stopPropagation();

        // Fade out and make not active
        document.body.classList.add('workFadeOut');
        setTimeout(function () {
            document.body.classList.remove('workActive', 'workReading', 'workFadeOut');
        }, 200);
    }
});

// TODO: Clean these up.
Template.workContent.events({
    'click footer.truncate button': function (event) {
        event.preventDefault();
        //$("body").addClass("workReadingAnimate");
        //$("body").removeClass("workReadingAnimate");
        $("body").addClass("workReading");
        $(".sticky").trigger("sticky_kit:recalc");
    },
    'click .backToPrevious': function (event) {
        document.body.classList.remove('mobile-article-open');
    }
});

var smoothScroll = function (event) {
    check(event, Event);

    // Prevent link from activating
    event.preventDefault();

    // Get position of element
    var element = document.querySelector(this.hash),
        offsetTop = 0, parent;

    // If anchor exists (and why shouldn't it?)
    if (element instanceof Element) {
        // Active Read More
        event.path[7].querySelector('footer.truncate button').click();

        // Aggregate offset top
        while (element.offsetParent) {
            offsetTop += element.offsetTop;
            element    = element.offsetParent;
        }

        // Then animate scroll
        // http://stackoverflow.com/questions/8149155/animate-scrolltop-not-working-in-firefox
        $('body,html').stop(true, true).
            animate({ scrollTop: offsetTop - 130 }, 750);
    }
};

/**
 * Dynamically Generate Tertiary menu
 * @method
 */
Template.workContent.onRendered(function () {
    var that = this;
    Deps.autorun(function (c) {
        var //workId   = that.firstNode.parentElement.parentElement.parentElement.id,
            tertiary = that.firstNode.querySelector('.workTertiary'),
            content  = tertiary.parentElement.querySelectorAll('h3'),
            ul       = document.createElement('ul'),
            li, a, i = 0, j = content.length;

        // Wait until ready
        if (!j) return;

        // Quit if there already is a menu (this method executes a dozen times
        // for some reason...)
        if (tertiary.children[0] instanceof Element) return;

        // We're ready now
        c.stop();

        for (; i < j; ++i) {
            // Create list and anchor elements
            li = document.createElement('li');
            a  = document.createElement('a');

            // Create link details
            a.href = '#' + content[i].id;
                //'/' + Thriver.history.registry.findOne({ element: workId }).currentPath +
                //'/' + content[i].id;
            a.textContent = content[i].textContent;
            a.addEventListener('click', smoothScroll);

            // Add elements
            ul.appendChild(li).appendChild(a);
        }

        tertiary.appendChild(ul);
    });
});

/**
 * @summary Register Deep-linking
 * @method
 */
Template.work.onRendered(function () {
    // Get db ID from current instance
    var instanceName = this.data.name,
        data = this.data;

    // Register
    Thriver.history.registry.insert({
        element: Thriver.sections.generateId(instanceName),

        /** Handle deep-linking */
        callback: function (path) {
            var sections, section, i, j, link,

            // Get Sections recursively
            getChildren = function (id) {
                var sections = {}, section,
                    children  = Thriver.sections.get(id, ['children']).children,
                    name, i, j;

                // Get name and ID for each tab
                for (i = 0, j = children.length; i < j; ++i) {
                    // Get section name
                    section = Thriver.sections.get( children[i], ['name'] );
                    name = section.name;

                    // Then sanitize section name
                    name = Thriver.sections.generateId(name);

                    // Add to link list and Recurse
                    sections[ name ] = getChildren( children[i] );

                    // Add ID to list as well
                    sections[ name ]._id = section._id;
                }

                return sections;
            };

            // If there's no path, there's nothing to do
            if (!path.length) return;

            // Get link list of all browseable sections
            sections = getChildren(data._id);

            // Get link for deep-linked section
            for (i = 0, j = path.length; i < j; ++i) {
                if (sections[ path[i] ])
                    sections = sections[ path[i] ];
                else break;
            }

            // Find anchor element
            link = document.querySelector('li[data-id="' + sections._id + '"] > a');

            // Click anchor to activate page
            if (link instanceof Element)
                link.click();
        }
    });
});

/**
 * @summary Support details elements in unsupported browsers
 * @method
 */
Template.work.onRendered(function () {
    details_shim.init();
});
