/* 
- helpers > transitions.import.less -
These helper classes are designed for applying cross-browser friendly and well-performed transitions.
*/

//Transition Mixin w/ 'will-change' and vendor prefix support
//Status: Fairly Efficient
//Improve: Mixin guard to prevent writing transition property twice
//Improve: Currently transform needs to be first parameter to work correctly
//Improve: Limited to 2 will-change properties
.transition (@value1,@value2:X,...){
    @value: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    @type1: extract(extract(@value1,1),1);
    @type2: extract(extract(@value2,1),1);
    will-change: @type1, @type2;
    -webkit-transition: @value;
    -moz-transition: @value;
    -ms-transition: @value;
    -o-transition: @value;
    transition: @value;
    & when (@type1 = transform){
        -webkit-transition: "-webkit-@{value}";
        -moz-transition: "-moz-@{value}";
        -ms-transition: "-ms-@{value}";
        -o-transition: "-o-@{value}";
        transition: @value;
    }
    & when (@type1 = none){
        will-change:initial;
        -webkit-transition: none;
        -moz-transition: none;
        -o-transition: none;
        -ms-transition: none;
        transition: none;
    }
}

/* // Possible loop through values (Pending deletion)
.transition (@value1,@value2:X,...){
    //@value: ~`"@{value}".replace(/[\[\]]|\,\sX/g, '')`;
    .loop(@i:1) when (@i <= length(@value)){
        @type: extract(extract(@value,@i),1);
        & when (@type = transform){
            -webkit-transition: @value;
            -moz-transition: @value;
            -ms-transition: @value;
            -o-transition: @value;
            transition: @value;
        }
        &when (default()) {
            -webkit-transition: @value;
            -moz-transition: @value;
            -ms-transition: @value;
            -o-transition: @value;
            transition: @value;
        }
        .loop((@i + 1));
    }
    .loop;
}
*/