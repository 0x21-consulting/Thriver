/* 
- helpers > helpers.import.less -
These helper classes can be applied to elements for a variety of states.
This file contains most globlized type helpers.
*/

//visibility
.visible{visibility: visible;}
.hidden{visibility: hidden;}

.noScroll{
    overflow: hidden;
}

//Opacity
.opacity(@amt){
    zoom: 1;
    filter: ~'alpha(opacity='100*@amt~')';
    opacity: @amt;
}

.borderRadius(@amt){
  -webkit-border-radius: @amt;
  -moz-border-radius: @amt;
  border-radius: @amt;
}

.userSelect(@value){
    -webkit-user-select:@value;
    -moz-user-select:@value;
    -ms-user-select: @value;
}

.placeholderColor(@color){
    ::-webkit-input-placeholder {color:@color;}
    :-moz-placeholder {color:@color;}
    ::-moz-placeholder {color:@color;}
    :-ms-input-placeholder {color:@color;}
}

.columns(@width,@count,@gap){
    -webkit-columns: @width @count;
    -moz-columns: @width @count;
    columns: @width @count;
    -webkit-column-gap: @gap;
    -moz-column-gap: @gap;
    column-gap: @gap;
}
.avoidColumnSplit{
    -webkit-column-break-inside: avoid;
    -moz-column-break-inside:avoid;
    -moz-page-break-inside:avoid;
    page-break-inside: avoid;
    break-inside: avoid-column;
}

.clearfix{
    &:after {
      visibility: hidden;
      display: block;
      font-size: 0;
      content: " ";
      clear: both;
      height: 0;
    }
}

//Media Queries
@1450: ~"only screen and (max-width: 1450px)";
@1250: ~"only screen and (max-width: 1250px)";
@1024: ~"only screen and (max-width: 1023px)";
@mobile: ~"only screen and (max-width: 768px)";

//Height
@air: ~"only screen and (max-height: 767px)";


//Transforms
.transform(@x){
    -webkit-transform: @x;
    transform: @x;  
}
.transform-style(@x){
    -webkit-transform-style: @x;
    transform-style: @x;
}
.transform-origin(@x){
    -webkit-transform-origin: @x;
    transform-origin: @x;
}
.perspective(@x){
    -webkit-perspective:@x;
    perspective:@x;
}
.perspective-origin(@x){
    -webkit-perspective-origin: @x;
    perspective-origin: @x;
}

//Transition Mixin w/ 'will-change' and vendor prefix support
//Status: Fairly Efficient
//Improve: Mixin guard to prevent writing transition property twice
//Improve: Currently transform needs to be first parameter to work correctly
//Improve: Limited to 2 will-change properties
.transition (@value1,@value2:X,...){
    @value: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    @type1: extract(extract(@value1,1),1);
    @type2: extract(extract(@value2,1),1);
    will-change: @type1, @type2;
    -webkit-transition: @value;
    -moz-transition: @value;
    -ms-transition: @value;
    -o-transition: @value;
    transition: @value;
    & when (@type1 = transform){
        -webkit-transition: "-webkit-@{value}";
        -moz-transition: "-moz-@{value}";
        -ms-transition: "-ms-@{value}";
        -o-transition: "-o-@{value}";
        transition: @value;
    }
    & when (@type1 = none){
        will-change:initial;
        -webkit-transition: none;
        -moz-transition: none;
        -o-transition: none;
        -ms-transition: none;
        transition: none;
    }
}


//Mixins
.boxShadow(@horizontal, @vertical, @blur, @spread, @opacity){
    -webkit-box-shadow: @horizontal @vertical @blur @spread rgba(0,0,0,@opacity);
    -moz-box-shadow: @horizontal @vertical @blur @spread rgba(0,0,0,@opacity);
    box-shadow: @horizontal @vertical @blur @spread rgba(0,0,0,@opacity);
}
.insetBoxShadow(@horizontal, @vertical, @blur, @spread, @opacity){
    -webkit-box-shadow: inset @horizontal @vertical @blur @spread rgba(0,0,0,@opacity);
    -moz-box-shadow: inset @horizontal @vertical @blur @spread rgba(0,0,0,@opacity);
    box-shadow: inset @horizontal @vertical @blur @spread rgba(0,0,0,@opacity);
}

//Definitions
.shadow(@type){
    & when (@type = far){
        .boxShadow(0px,0px,20px,-3px,0.2);
    }
    & when (@type = closeInset){
        .insetBoxShadow(0px,0px,10px,0px,0.5);
    }
    & when (@type = close){
        .boxShadow(0px,0px,5px,0px,0.3);
    }
    & when (@type = closeLeft){
        .boxShadow(-5px,0px,6px,-3px,0.2);
    }
    & when (@type = closeRight){
        .boxShadow(5px,0px,6px,-3px,0.2);
    }
    & when (@type = closeDown){
        .boxShadow(0px,1px,3px,0px,0.3);
    }
    & when (@type = closeUp){
        .boxShadow(0px,-1px,3px,0px,0.3);
    }
    & when (@type = middleUp){
        .boxShadow(0px,-4px,5px,1px,0.3);
    }
}

//Hard Shadow
.hardShadow(@width,@height,@left,@marginTop){
    &:after{
        z-index: -1;
        .borderRadius(50%);
        content: '';
        position: absolute;
        pointer-events: none;
        background: -moz-radial-gradient(center, ellipse cover,  rgba(0,0,0,0.4) 0%, rgba(0,0,0,0) 100%);
        background: -webkit-radial-gradient(center, ellipse cover,  rgba(0,0,0,0.4) 0%,rgba(0,0,0,0) 100%);
        background: radial-gradient(ellipse at center,  rgba(0,0,0,0.4) 0%,rgba(0,0,0,0) 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#a6000000', endColorstr='#00000000',GradientType=1 );
        margin-top: @marginTop;
        left: @left;
        height: @height;
        width: @width;
    }
}

//Deactivate Shadow
.shadowNone{
    -webkit-box-shadow: none;
    -moz-box-shadow: none;
    box-shadow: none;
}




//Color Classes
.color (@property, @color, @style) {
    & when (@style = light) {
        @{property}: lighten(@color, 2.5%);
    }
    & when (@style = lighter) {
        @{property}: lighten(@color, 5%);
    }
    & when (@style = lightest) {
        @{property}: lighten(@color, 7.5%);
    }
    & when (@style = dark) {
        @{property}: darken(@color, 2.5%);
    }
    & when (@style = darker) {
        @{property}: darken(@color, 5%);
    }
    & when (@style = darkest) {
        @{property}: darken(@color, 7.5%);
    }
    & when (@style = none) {
        @{property}: @color;
    }
}
//Buttons
//Button Colors
.buttonColor(@color){
    .color(background-color,@color,none);
    span.notificationsAlert{
        .color(border-color,@color,none);
    }
    &:hover{
        background-color:lighten(saturate(@color, 10%),2%);
        //.color(background-color,@color,light);
        span.notificationsAlert{
            border-color:lighten(saturate(@color, 10%),2%);
        }
    }
    &:focus{
        .color(background-color,@color,lighter);
        span.notificationsAlert{
            .color(border-color,@color,lighter);
        }
    }
    &:active{
        .color(background-color,@color,dark);
        span.notificationsAlert{
            .color(border-color,@color,dark);
        }
    }
}

//Text Button Colors
.textButtonColor(@color){
    .color(color,@color,none);
    &:hover, &:focus{
        .color(color,@color,dark);
    }
    &:active{
        .color(color,@color,darker);
    }
}